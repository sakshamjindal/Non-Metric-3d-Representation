# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/MoCo-view.ipynb (unless otherwise specified).

__all__ = ['MoCo_view']

# Cell

import torch
import torch.nn as nn
from random import sample
import torch.nn as nn
import torch

from .encoder import Encoder
from .utils import pair_embeddings, stack_features_across_batch, convert_indices

# Cell
class MoCo_view(nn.Module):
    """
    Build a MoCo model with: a query encoder, a key encoder, and a queue
    https://arxiv.org/abs/1911.05722
    """
    def __init__(self, base_encoder=None, dim=256, r=35, m=0.999, T=0.1, mlp=False, mode=None):
        """
        dim: feature dimension (default: 128)
        r: queue size; number of negative samples/prototypes (default: 16384)
        m: momentum for updating key encoder (default: 0.999)
        T: softmax temperature
        mlp: whether to use mlp projection
        """
        super(MoCo, self).__init__()

        self.r = r
        self.m = m
        self.T = T
        self.mode = mode


        self.encoder_q = Encoder(dim = dim, mode=self.mode)
        self.encoder_k = Encoder(dim = dim, mode=self.mode)

        for param_q, param_k in zip(self.encoder_q.parameters(), self.encoder_k.parameters()):
            param_k.data.copy_(param_q.data)  # initialize
            param_k.requires_grad = False  # not update by gradient

        # create the queue
        self.register_buffer("queue", torch.randn(dim, r))
        self.queue = nn.functional.normalize(self.queue, dim=0)

        self.register_buffer("queue_ptr", torch.zeros(1, dtype=torch.long))

    @torch.no_grad()
    def _momentum_update_key_encoder(self):
        """
        Momentum update of the key encoder
        """
        for param_q, param_k in zip(self.encoder_q.parameters(), self.encoder_k.parameters()):
            param_k.data = param_k.data * self.m + param_q.data * (1. - self.m)

    @torch.no_grad()
    def _dequeue_and_enqueue(self, keys):

        # gather keys before updating queue
#         keys = concat_all_gather(keys)

        batch_size = keys.shape[0]

        ptr = int(self.queue_ptr)
        #removes for now
#         assert self.r % batch_size == 0  # for simplicity

        if ptr + batch_size>=self.r:
            ptr=0

        # replace the keys at ptr (dequeue and enqueue)
        self.queue[:, ptr:ptr + batch_size] = keys.T
        ptr = (ptr + batch_size) % self.r  # move pointer

        self.queue_ptr[0] = ptr

    def forward(self, feed_dict_q, feed_dict_k=None, feed_dicts_N=None, is_eval=False):
        """
        Input:
            feed_dict_q: a batch of query images and bounding boxes
            feed_dict_k: a batch of key images and bounding boxes
            is_eval: return momentum embeddings (used for clustering)
            cluster_result: cluster assignments, centroids, and density
            index: indices for training samples
            mode : should be either 'node' or 'spatial' depending on whether training for node or spatial embeddings
        Output:
            logits, targets, proto_logits, proto_targets
        """

        mode = self.mode
        hyp_N = feed_dict_q["objects"][0].item()

        if mode=="node":
            rel_viewpoint=None

        if is_eval:
            # the output from encoder is a list of features from the batch where each batch element (image)
            # might contain different number of objects
            k = self.encoder_k(feed_dict_q)

            # encoder output features in the list are stacked to form a tensor of features across the batch
            k = stack_features_across_batch(k, mode)

            # normalize feature across the batch
            k = nn.functional.normalize(k, dim=1)
            return k

        rel_viewpoint = metadata["rel_viewpoint"]

        if mode=="node":
            rel_viewpoint=None

        # compute key features
        with torch.no_grad():  # no gradient to keys
            self._momentum_update_key_encoder()  # update the key encoder

            #compute key features
            k_outputs = self.encoder_k(feed_dict_k, rel_viewpoint)

        # compute query features
        q_outputs = self.encoder_q(feed_dict_q)  # queries: NxC

#         k,q = pair_embeddings(k_outputs, q_outputs, mode)
        k,q = k_outputs, q_outputs

        k = stack_features_across_batch(k, mode)
        q = stack_features_across_batch(q, mode)

        q = nn.functional.normalize(q, dim=1)

        with torch.no_grad():
            k = nn.functional.normalize(k, dim=1)


        with torch.no_grad():
            for feed_dict in range(feed_dicts_N):
                scene_negatives = self.forward(feed_dict_q=feed_dict, is_eval=True)
                self._dequeue_and_enqueue(scene_negatives)


        # compute logits
        # Einstein sum is more intuitive
        # positive logits: Nx1
        l_pos = torch.einsum('nc,nc->n', [q, k]).unsqueeze(-1)
        # negative logits: Nxr
        l_neg = torch.einsum('nc,ck->nk', [q, self.queue.clone().detach()])

        # logits: Nx(1+r)
        logits = torch.cat([l_pos, l_neg], dim=1)

        # apply temperature
        logits /= self.T

        # labels: positive key indicators
        labels = torch.zeros(logits.shape[0], dtype=torch.long).cuda()

        # dequeue and enqueue
        self._dequeue_and_enqueue(k)

        return logits, labels, None, None